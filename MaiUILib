-- Speed Hub X UI Library
-- Version: 3.0
-- Includes: Window, Tab, Section, Label, Button

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")

local SpeedHubX = {}

-- Utility functions
local function CreateInstance(Name, Properties, Parent)
    local instance = Instance.new(Name)
    for i, v in pairs(Properties) do
        instance[i] = v
    end
    if Parent then
        instance.Parent = Parent
    end
    return instance
end

local function CircleClick(Button, X, Y)
    task.spawn(function()
        Button.ClipsDescendants = true

        local Circle = CreateInstance("ImageLabel", {
            Image = "rbxassetid://266543268",
            ImageColor3 = Color3.fromRGB(80, 80, 80),
            ImageTransparency = 0.9,
            BackgroundTransparency = 1,
            ZIndex = 10,
            Name = "Circle",
            Parent = Button
        })

        local NewX = X - Button.AbsolutePosition.X
        local NewY = Y - Button.AbsolutePosition.Y
        Circle.Position = UDim2.new(0, NewX, 0, NewY)

        local Size = math.max(Button.AbsoluteSize.X, Button.AbsoluteSize.Y) * 1.5
        local Time = 0.5
        local Tween = TweenService:Create(Circle, TweenInfo.new(Time, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, Size, 0, Size),
            Position = UDim2.new(0.5, -Size/2, 0.5, -Size/2)
        })

        Tween:Play()
        Tween.Completed:Connect(function()
            for i = 1, 10 do
                Circle.ImageTransparency = Circle.ImageTransparency + 0.01
                task.wait(Time / 10)
            end
            Circle:Destroy()
        end)
    end)
end

local function MakeDraggable(topbarobject, object)
    local dragging, dragStart, startPos = false, nil, nil

    local function UpdatePos(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        object.Position = newPos
    end

    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = object.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    topbarobject.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            UpdatePos(input)
        end
    end)
end

-- Main Window Class
function SpeedHubX:CreateWindow(Config)
    local Title = Config.Title or "Speed Hub X"
    local Description = Config.Description or ""
    local TabWidth = Config.TabWidth or 120
    local Size = Config.Size or UDim2.fromOffset(550, 315)
    local Color = Config.Color or Color3.fromRGB(250, 7, 7)
    
    local Window = {
        Color = Color,
        Unloaded = false
    }
    
    -- Create main GUI
    local SpeedHubXGui = CreateInstance("ScreenGui", {
        Name = "SpeedHubXGui",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    }, RunService:IsStudio() and Player.PlayerGui or (gethui() or game:GetService("CoreGui")))
    
    -- Create window frame with shadow
    local DropShadowHolder = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = Size,
        ZIndex = 0,
        Name = "DropShadowHolder",
        Position = UDim2.new(0, (SpeedHubXGui.AbsoluteSize.X // 2 - Size.X.Offset // 2), 
        0, (SpeedHubXGui.AbsoluteSize.Y // 2 - Size.Y.Offset // 2))
    }, SpeedHubXGui)
    
    local DropShadow = CreateInstance("ImageLabel", {
        Image = "rbxassetid://6015897843",
        ImageColor3 = Color3.fromRGB(15, 15, 15),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = Size,
        ZIndex = 0,
        Name = "DropShadow"
    }, DropShadowHolder)
    
    local Main = CreateInstance("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BackgroundTransparency = 0.1,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = Size,
        Name = "Main"
    }, DropShadow)
    
    CreateInstance("UICorner", {}, Main)
    CreateInstance("UIStroke", {
        Color = Color3.fromRGB(50, 50, 50),
        Thickness = 1.6
    }, Main)
    
    -- Top bar
    local Top = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 38),
        Name = "Top"
    }, Main)
    
    local TitleLabel = CreateInstance("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 10, 0, 0)
    }, Top)
    
    CreateInstance("UICorner", {}, Top)
    
    local DescLabel = CreateInstance("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Description,
        TextColor3 = Color,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -(TitleLabel.TextBounds.X + 104), 1, 0),
        Position = UDim2.new(0, TitleLabel.TextBounds.X + 15, 0, 0)
    }, Top)
    
    CreateInstance("UIStroke", {
        Color = Color,
        Thickness = 0.4
    }, DescLabel)
    
    -- Window controls
    local Close = CreateInstance("TextButton", {
        Text = "",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -8, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Name = "Close"
    }, Top)
    
    CreateInstance("ImageLabel", {
        Image = "rbxassetid://9886659671",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.49, 0, 0.5, 0),
        Size = UDim2.new(1, -8, 1, -8)
    }, Close)
    
    local Min = CreateInstance("TextButton", {
        Text = "",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -42, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Name = "Min"
    }, Top)
    
    CreateInstance("ImageLabel", {
        Image = "rbxassetid://9886659276",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -8, 1, -8)
    }, Min)
    
    -- Tab system
    local LayersTab = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 9, 0, 50),
        Size = UDim2.new(0, TabWidth, 1, -59),
        Name = "LayersTab"
    }, Main)
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 2)
    }, LayersTab)
    
    local Layers = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, TabWidth + 18, 0, 50),
        Size = UDim2.new(1, -(TabWidth + 9 + 18), 1, -59),
        Name = "Layers"
    }, Main)
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 2)
    }, Layers)
    
    local NameTab = CreateInstance("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = "Home",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 24,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Name = "NameTab"
    }, Layers)
    
    local LayersReal = CreateInstance("Frame", {
        AnchorPoint = Vector2.new(0, 1),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 1, -33),
        Name = "LayersReal"
    }, Layers)
    
    local LayersFolder = CreateInstance("Folder", {
        Name = "LayersFolder"
    }, LayersReal)
    
    local LayersPageLayout = CreateInstance("UIPageLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Name = "LayersPageLayout",
        TweenTime = 0.5,
        EasingDirection = Enum.EasingDirection.InOut,
        EasingStyle = Enum.EasingStyle.Quad
    }, LayersFolder)
    
    local ScrollTab = CreateInstance("ScrollingFrame", {
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 0,
        Active = true,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, -10),
        Name = "ScrollTab"
    }, LayersTab)
    
    CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 0),
        SortOrder = Enum.SortOrder.LayoutOrder
    }, ScrollTab)
    
    local function UpdateScrollTabSize()
        local Total = 0
        for _, v in pairs(ScrollTab:GetChildren()) do
            if v.Name ~= "UIListLayout" then
                Total = Total + 3 + v.Size.Y.Offset
            end
        end
        ScrollTab.CanvasSize = UDim2.new(0, 0, 0, Total)
    end
    
    ScrollTab.ChildAdded:Connect(UpdateScrollTabSize)
    ScrollTab.ChildRemoved:Connect(UpdateScrollTabSize)
    
    -- Create minimize/restore button
    local Open_Close = CreateInstance("ImageButton", {
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BorderColor3 = Color3.fromRGB(255, 0, 0),
        Position = UDim2.new(0.1021, 0, 0.0743, 0),
        Size = UDim2.new(0, 59, 0, 49),
        Image = "rbxassetid://82140212012109",
        Visible = false,
        Parent = RunService:IsStudio() and Player.PlayerGui or (gethui() or game:GetService("CoreGui"))
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 9)
    }, Open_Close)
    
    -- Draggable functionality for Open_Close button
    local dragging, dragStart, startPos = false, nil, nil
    local function UpdateDraggable(input)
        local delta = input.Position - dragStart
        Open_Close.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    Open_Close.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Open_Close.Position
    
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    Open_Close.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            UpdateDraggable(input)
        end
    end)
    
    -- Button events
    Min.Activated:Connect(function()
        CircleClick(Min, Player:GetMouse().X, Player:GetMouse().Y)
        DropShadowHolder.Visible = false
        if not Open_Close.Visible then Open_Close.Visible = true end
    end)
    
    Open_Close.Activated:Connect(function()
        DropShadowHolder.Visible = true
        if Open_Close.Visible then Open_Close.Visible = false end
    end)
    
    Close.Activated:Connect(function()
        CircleClick(Close, Player:GetMouse().X, Player:GetMouse().Y)
        if SpeedHubXGui then SpeedHubXGui:Destroy() end
        if not Window.Unloaded then Window.Unloaded = true end
    end)
    
    -- Update window size based on title/description
    DropShadowHolder.Size = UDim2.new(0, 115 + TitleLabel.TextBounds.X + 1 + DescLabel.TextBounds.X, 0, Size.Y.Offset)
    MakeDraggable(Top, DropShadowHolder)
    
    -- Tab creation function
    function Window:CreateTab(TabName, TabIcon)
        local TabContent = CreateInstance("ScrollingFrame", {
            ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80),
            ScrollBarThickness = 0,
            Active = true,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Name = TabName.."Content",
            Parent = LayersFolder
        })
        
        CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 3),
            SortOrder = Enum.SortOrder.LayoutOrder
        }, TabContent)
        
        local TabUI = CreateInstance("Frame", {
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.92,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 30),
            Name = TabName.."Tab",
            Parent = ScrollTab
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 4)
        }, TabUI)
        
        local TabButton = CreateInstance("TextButton", {
            Text = "",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Name = "TabButton",
        }, TabUI)
        
        CreateInstance("TextLabel", {
            Font = Enum.Font.GothamBold,
            Text = TabName,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0, 30, 0, 0),
            Name = "TabName",
        }, TabUI)
        
        CreateInstance("ImageLabel", {
            Image = TabIcon or "rbxassetid://4973307613",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 9, 0, 7),
            Size = UDim2.new(0, 16, 0, 16),
            Name = "FeatureImg",
        }, TabUI)
        
        local ChooseFrame = CreateInstance("Frame", {
            BackgroundColor3 = Color,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 2, 0, 9),
            Size = UDim2.new(0, 1, 0, 12),
            Name = "ChooseFrame",
        }, TabUI)
        
        CreateInstance("UIStroke", {
            Color = Color,
            Thickness = 1.6,
        }, ChooseFrame)
        
        CreateInstance("UICorner", {}, ChooseFrame)
        
        TabButton.Activated:Connect(function()
            NameTab.Text = TabName
            LayersPageLayout:JumpTo(TabContent)
            
            -- Update selection indicator
            for _, tab in pairs(ScrollTab:GetChildren()) do
                if tab:IsA("Frame") and tab ~= TabUI then
                    tab.BackgroundTransparency = 0.96
                    tab:FindFirstChild("ChooseFrame").BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                end
            end
            
            TabUI.BackgroundTransparency = 0.92
            ChooseFrame.BackgroundColor3 = Color
        end)
        
        -- Select first tab by default
        if #LayersFolder:GetChildren() == 1 then
            LayersPageLayout:JumpToIndex(1)
            NameTab.Text = TabName
        end
        
        local Tab = {
            Name = TabName,
            Content = TabContent
        }
        
        function Tab:CreateSection(SectionName)
            local Section = CreateInstance("Frame", {
                BackgroundTransparency = 1,
                ClipsDescendants = true,
                Size = UDim2.new(1, 0, 0, 30),
                Name = SectionName,
                Parent = TabContent
            })
            
            local SectionReal = CreateInstance("Frame", {
                AnchorPoint = Vector2.new(0.5, 0),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 0.935,
                BorderSizePixel = 0,
                Position = UDim2.new(0.5, 0, 0, 0),
                Size = UDim2.new(1, 1, 0, 30),
                Name = "SectionReal"
            }, Section)
            
            CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 4)
            }, SectionReal)
            
            local SectionTitle = CreateInstance("TextLabel", {
                Font = Enum.Font.GothamBold,
                Text = SectionName,
                TextColor3 = Color3.fromRGB(230, 230, 230),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0.5, 0),
                Size = UDim2.new(1, -50, 0, 13),
                Name = "SectionTitle"
            }, SectionReal)
            
            local SectionAdd = CreateInstance("Frame", {
                AnchorPoint = Vector2.new(0.5, 0),
                BackgroundTransparency = 1,
                ClipsDescendants = true,
                Position = UDim2.new(0.5, 0, 0, 38),
                Size = UDim2.new(1, 0, 0, 100),
                Name = "SectionAdd"
            }, Section)
            
            CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 2)
            }, SectionAdd)
            
            CreateInstance("UIListLayout", {
                Padding = UDim.new(0, 3),
                SortOrder = Enum.SortOrder.LayoutOrder
            }, SectionAdd)
            
            local function UpdateSectionSize()
                local SectionSizeYWitdh = 38
                for _, v in pairs(SectionAdd:GetChildren()) do
                    if v.Name ~= "UIListLayout" and v.Name ~= "UICorner" then
                        SectionSizeYWitdh = SectionSizeYWitdh + v.Size.Y.Offset + 3
                    end
                end
                TweenService:Create(Section, TweenInfo.new(0.1), {Size = UDim2.new(1, 1, 0, SectionSizeYWitdh)}):Play()
                TweenService:Create(SectionAdd, TweenInfo.new(0.1), {Size = UDim2.new(1, 0, 0, SectionSizeYWitdh - 38)}):Play()
                
                -- Update tab content size
                task.wait(0.1)
                local OffsetY = 0
                for _, child in pairs(TabContent:GetChildren()) do
                    if child.Name ~= "UIListLayout" then
                        OffsetY = OffsetY + 3 + child.Size.Y.Offset
                    end
                end
                TabContent.CanvasSize = UDim2.new(0, 0, 0, OffsetY)
            end
            
            local SectionObj = {
                Name = SectionName,
                Content = SectionAdd
            }
            
            function SectionObj:CreateButton(ButtonConfig)
                local ButtonName = ButtonConfig.Name or "Button"
                local Description = ButtonConfig.Description or "Click this button"
                local Callback = ButtonConfig.Callback or function() end
                local Icon = ButtonConfig.Icon or "rbxassetid://16932740082"
                
                local Button = CreateInstance("Frame", {
                    Name = ButtonName,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0.935,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 35),
                    Parent = SectionAdd
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 4)
                }, Button)
                
                CreateInstance("TextLabel", {
                    Name = "ButtonTitle",
                    Font = Enum.Font.GothamBold,
                    Text = ButtonName,
                    TextColor3 = Color3.fromRGB(231, 231, 231),
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 10),
                    Size = UDim2.new(1, -100, 0, 13)
                }, Button)
                
                local ButtonContent = CreateInstance("TextLabel", {
                    Name = "ButtonContent",
                    Font = Enum.Font.GothamBold,
                    Text = Description,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 12,
                    TextTransparency = 0.6,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Bottom,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 23),
                    Size = UDim2.new(1, -100, 0, 12)
                }, Button)
                
                local function UpdateButtonSize()
                    local Height = 12 + (12 * (ButtonContent.TextBounds.X // ButtonContent.AbsoluteSize.X))
                    ButtonContent.Size = UDim2.new(1, -100, 0, Height)
                    Button.Size = UDim2.new(1, 0, 0, ButtonContent.AbsoluteSize.Y + 33)
                    UpdateSectionSize()
                end
                
                ButtonContent.TextWrapped = true
                UpdateButtonSize()
                
                ButtonContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                    ButtonContent.TextWrapped = false
                    UpdateButtonSize()
                    ButtonContent.TextWrapped = true
                end)
                
                local ButtonButton = CreateInstance("TextButton", {
                    Name = "ButtonButton",
                    Text = "",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0)
                }, Button)
                
                local FeatureFrame = CreateInstance("Frame", {
                    Name = "FeatureFrame",
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -15, 0.5, 0),
                    Size = UDim2.new(0, 25, 0, 25)
                }, Button)
                
                CreateInstance("ImageLabel", {
                    Name = "FeatureImg",
                    Image = Icon,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Size = UDim2.new(1, 0, 1, 0)
                }, FeatureFrame)
                
                ButtonButton.Activated:Connect(function()
                    CircleClick(ButtonButton, Player:GetMouse().X, Player:GetMouse().Y)
                    Callback()
                end)
                
                UpdateSectionSize()
                
                return {
                    Name = ButtonName,
                    Instance = Button
                }
            end
            
            function SectionObj:CreateLabel(LabelConfig)
                local Text = LabelConfig.Text or "Label"
                local TextSize = LabelConfig.TextSize or 13
                local TextColor = LabelConfig.TextColor or Color3.fromRGB(255, 255, 255)
                
                local Label = CreateInstance("TextLabel", {
                    Name = "Label",
                    Font = Enum.Font.GothamBold,
                    Text = Text,
                    TextColor3 = TextColor,
                    TextSize = TextSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, TextSize + 10),
                    Parent = SectionAdd
                })
                
                UpdateSectionSize()
                
                return {
                    Name = Text,
                    Instance = Label,
                    
                    Update = function(self, NewText)
                        Label.Text = NewText
                    end
                }
            end
            
            UpdateSectionSize()
            
            return SectionObj
        end
        
        return Tab
    end
    
    -- Enable AFK prevention
    Player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
    
    return Window
end

return SpeedHubX